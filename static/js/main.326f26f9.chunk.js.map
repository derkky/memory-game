{"version":3,"sources":["components/utils/shuffleArray.js","components/utils/randomCardGenerator.js","components/CardsContainer.js","components/LoseModal.js","components/WinModal.js","components/Header.js","components/InstructionsModal.js","App.js","reportWebVitals.js","index.js"],"names":["shuffleArray","array","i","length","j","Math","floor","random","generateRandomCards","n","distinctColors","count","map","color","_rgb","r","g","b","rgbString","id","uniqid","CardContainer","cards","handleClick","className","card","style","backgroundColor","onClick","LoseModal","loseModalRef","closeLoseModal","ref","WinModal","winModalRef","closeWinModal","Header","openInstructionsModal","score","bestScore","InstructionsModal","instructionsModalRef","closeInstructionsModal","App","useState","setScore","setBestScore","setCards","clickedCards","setClickedCards","resetScore","emptyClickedCards","shuffleCards","shuffledCards","React","useEffect","newScore","openWinModal","useRef","openLoseModal","current","display","ev","includes","target","addCardToClicked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.326f26f9.chunk.js","sourcesContent":["function shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n\r\n    return array\r\n}\r\n\r\nexport default shuffleArray\r\n","import distinctColors from \"distinct-colors\"\r\nimport uniqid from \"uniqid\"\r\n\r\nconst generateRandomCards = (n) => {\r\n    const colors = distinctColors({count: n})\r\n\r\n    const rgbStrings = colors.map(color => {\r\n        const [r, g, b] = color._rgb \r\n        const rgbString = `rgb(${r},${g},${b})`\r\n        return rgbString\r\n    })\r\n    \r\n    const cards = rgbStrings.map(rgbString => {\r\n        const card = {id: uniqid(), color: rgbString} \r\n        return card\r\n    })\r\n\r\n    return cards\r\n}\r\n\r\nexport default generateRandomCards\r\n\r\n\r\n","const CardContainer = ({cards, handleClick}) => {\r\n    return(\r\n        <div className=\"card-container\">\r\n            {cards.map(card => {\r\n            return(\r\n                <div \r\n                key={card.id}\r\n                id={card.id}\r\n                className=\"card\" \r\n                style={{backgroundColor: card.color}}\r\n                onClick={handleClick}/>\r\n            )\r\n            })}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default CardContainer","const LoseModal = ({loseModalRef, closeLoseModal}) => {\r\n    return(\r\n      <div className=\"w3-modal\" ref={loseModalRef}>\r\n        <div className=\"w3-modal-content\">\r\n          <div className=\"w3-container w3-teal\">\r\n          <span \r\n              onClick={closeLoseModal}\r\n              className=\"w3-button w3-display-topright\">&times;</span>\r\n            <h2> Oh no... </h2>\r\n          </div>\r\n          <div className=\"w3-container\">\r\n            \r\n              <p> You lose!</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default LoseModal","const WinModal = ({winModalRef, closeWinModal}) => {\r\n    return(\r\n      <div className=\"w3-modal\" ref={winModalRef}>\r\n        <div className=\"w3-modal-content\">\r\n\r\n          <div className=\"w3-container w3-teal\">\r\n            <h2> Congratulations </h2>\r\n          </div>\r\n\r\n          <div className=\"w3-container\">\r\n            <p> You win!</p>\r\n            <br/>\r\n          </div>\r\n\r\n          <div className=\"w3-display-container w3-teal\">\r\n            <span \r\n              onClick={closeWinModal}\r\n              className=\"w3-button w3-display-bottommiddle\">Next Level</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default WinModal","const Header = ({openInstructionsModal, score, bestScore}) => {\r\n    return(\r\n      <header className=\"w3-teal\">\r\n        <div>\r\n          <span className=\"w3-button w3-white\" onClick={openInstructionsModal}> Instructions </span>\r\n          <h1> Memory Game </h1>\r\n          <div className=\"scoreboard\">\r\n            <span> Score = {score} </span>\r\n            <span> Best Score = {bestScore} </span>\r\n          </div>\r\n         \r\n        </div>\r\n      </header>\r\n    )\r\n}\r\n\r\nexport default Header","const InstructionsModal = ({instructionsModalRef, closeInstructionsModal}) => {\r\n    return(\r\n      <div className=\"w3-modal\" ref={instructionsModalRef}>\r\n        <div className=\"w3-modal-content\">\r\n          <div className=\"w3-container w3-teal\">\r\n            <span onClick={closeInstructionsModal}\r\n              className=\"w3-button w3-display-topright\">&times;</span>\r\n            <h2>Instructions</h2>\r\n          </div>\r\n          <div className=\"w3-container\">\r\n            <p>\r\n            This application puts your memory to the test. \r\n            You are presented with multiple colors. \r\n            The colors get shuffled every-time they are clicked. \r\n            You CAN NOT click on any color more than once or else your score resets to zero. \r\n            The main objective is to get the highest score as possible.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default InstructionsModal","import React, { useState, useRef } from \"react\"\nimport \"./components/styles/styles.css\"\nimport shuffleArray from \"./components/utils/shuffleArray\"\nimport generateRandomCards from \"./components/utils/randomCardGenerator\"\nimport CardContainer from \"./components/CardsContainer\"\nimport LoseModal from \"./components/LoseModal\"\nimport WinModal from \"./components/WinModal\"\nimport Header from \"./components/Header\"\nimport InstructionsModal from \"./components/InstructionsModal\"\n\nfunction App() {\n  const [score, setScore] = useState(0)\n\n  const [bestScore, setBestScore] = useState(0)\n\n  const [cards, setCards] = useState(generateRandomCards(4))\n\n  const [clickedCards, setClickedCards] = useState([])\n\n  const incrementScore = () => {\n    setScore(score + 1)\n  }\n\n  const resetScore = () => {\n    setScore(0)\n  }\n\n  const advanceLevel = () => {\n    setCards(generateRandomCards(cards.length + 1))\n    resetScore()\n    emptyClickedCards()\n  }\n\n  const addCardToClicked = (ev) => {\n    setClickedCards(\n      [...clickedCards, ev.target.id]\n    )\n  }\n\n  const emptyClickedCards = () => {\n    setClickedCards([])\n  }\n\n  const shuffleCards = () => {\n    const shuffledCards = shuffleArray(cards)\n    setCards(shuffledCards)\n  }\n\n  const handleClick = (ev) => {\n    if (clickedCards.includes(ev.target.id)) {\n      resetScore()\n      openLoseModal()\n      emptyClickedCards()\n      shuffleCards()\n    } else {\n      incrementScore()\n      shuffleCards()\n      addCardToClicked(ev)\n    }\n    \n  }\n\n  React.useEffect(() => {\n    const updateBestScore = (newScore) => {\n      setBestScore(\n        (newScore > bestScore) ? newScore : bestScore\n      )\n    }\n\n    updateBestScore(score)\n  }, [score, bestScore])\n\n  React.useEffect(() => {\n    if (score === cards.length){\n      openWinModal()\n    }\n  }, [score, cards])\n\n  const loseModalRef = useRef()\n  const closeLoseModal = () => {\n    loseModalRef.current.style.display = \"none\"\n  }\n  const openLoseModal = () => {\n    loseModalRef.current.style.display = \"block\"\n  }\n\n  const winModalRef = useRef()\n  const closeWinModal = () => {\n    winModalRef.current.style.display = \"none\"\n    advanceLevel()\n  }\n  const openWinModal = () => {\n    winModalRef.current.style.display = \"block\"\n  }\n\n  const instructionsModalRef = useRef()\n  const closeInstructionsModal = () => {\n    instructionsModalRef.current.style.display = \"none\"\n  }\n  const openInstructionsModal = () => {\n    instructionsModalRef.current.style.display = \"block\"\n  }\n\n  return (\n    <div className=\"App\">\n      <Header openInstructionsModal={openInstructionsModal} score={score} bestScore={bestScore}/>\n\n      <InstructionsModal instructionsModalRef={instructionsModalRef} closeInstructionsModal={closeInstructionsModal} />\n\n      <CardContainer cards={cards} handleClick={handleClick}/>\n\n      <LoseModal loseModalRef={loseModalRef} closeLoseModal={closeLoseModal} />\n\n      <WinModal winModalRef={winModalRef} closeWinModal={closeWinModal} />\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}